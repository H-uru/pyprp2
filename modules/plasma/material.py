import bpy
from PyHSPlasma import *
import os

def SetLayerColorToBlMat(layer, material):
    dcolor = material.diffuse_color
    layer.runtime = hsColorRGBA(dcolor[0],dcolor[1],dcolor[2],1.0)
    layer.preshade = hsColorRGBA(dcolor[0],dcolor[1],dcolor[2],1.0)
    layer.ambient = hsColorRGBA.kBlack
    scolor = material.specular_color
    layer.specular = hsColorRGBA(scolor[0],scolor[1],scolor[2],1.0)
    return layer

def ExportMaterial(rm, loc, material, vos, exportpath):
    mat = hsGMaterial(material.name)
    rm.AddObject(loc,mat)
    
    for slot in material.texture_slots:
        if slot:
            texture = slot.texture
            if texture.type == "NONE": #if it has a none type at least it has a name to export it under
                layer = plLayer(texture.name)
                SetLayerColorToBlMat(layer,material)
                rm.AddObject(loc,layer)
                mat.addLayer(layer.key)
            elif texture.type == "IMAGE":
#                if texture.image.source == "FILE":
#                    texture_name = os.path.splitext(os.path.split(texture.image.filename)[1])[0]
#                    cacheimagename = texture_name+".dds"
#                    cachedimagepath = os.path.join(exportpath,"texcache",cacheimagename)
#                    if texture.use_alpha:
#                        dxttype = 5
#                    else:
#                        dxttype = 1
#                    response = os.system("ConvertToDDS \"%s\" \"%s\" %i"%(texture.image.filename,cachedimagepath,dxttype))
#                    print(response)
#                    mm = plMipmap(texture_name)
#                    ddsstream = hsFileStream()
#                    ddsstream.open(cachedimagepath, fmRead)
#                    filesize = os.path.getsize(cachedimagepath)
#                    print("size is %i"%filesize)
                    #mm.readFromStream(ddsstream, True, filesize)
#                    ddsstream.close()
#                    rm.AddObject(loc,mm)
#                    layer = plLayer(texture.name)
#                    SetLayerColorToBlMat(layer,material)
#                    rm.AddObject(loc,layer)
#                    mat.addLayer(layer.key)
                
#                else:
#                    raise Exception("Image must be a loaded file.")

            
    if len(mat.layers) == 0: #save the day with an autogenerated layer
        layer = plLayer("%s_auto_layer"%material.name)
        SetLayerColorToBlMat(layer,material)
        rm.AddObject(loc,layer)
        mat.addLayer(layer.key)
        
    vos.materials[material] = mat.key


