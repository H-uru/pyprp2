import bpy
from PyHSPlasma import *
import os
import subprocess

def SetLayerColorToBlMat(layer, material):
    dcolor = material.diffuse_color
    layer.runtime = hsColorRGBA(dcolor[0],dcolor[1],dcolor[2],1.0)
    layer.preshade = hsColorRGBA(dcolor[0],dcolor[1],dcolor[2],1.0)
    layer.ambient = hsColorRGBA.kBlack
    scolor = material.specular_color
    layer.specular = hsColorRGBA(scolor[0],scolor[1],scolor[2],1.0)
    return layer

def ExportMaterial(rm, loc, material, vos, config):
    mat = hsGMaterial(material.name)
    rm.AddObject(loc,mat)
    
    for slot in material.texture_slots:
        if slot:
            texture = slot.texture
            if texture.type == "NONE": #if it has a none type at least it has a name to export it under
                layer = plLayer(texture.name)
                SetLayerColorToBlMat(layer,material)
                rm.AddObject(loc,layer)
                mat.addLayer(layer.key)
            elif texture.type == "IMAGE":
                if texture.image.source == "FILE":
                    cachepath = config.get("texturecachepath")
                    exepath = config.get("executablepath")
                    buildplmipmap_path = os.path.join(exepath, "buildplmipmap")
                    cachename = os.path.splitext(os.path.split(texture.image.filename)[1])[0]
                    cachefilepathfull = os.path.join(cachepath,cachename)
                    print([buildplmipmap_path, texture.image.filename, cachefilepathfull, "mipmap", "DXT5"])
                    subprocess.call([buildplmipmap_path, texture.image.filename, cachefilepathfull, "mipmap", "DXT5"])

                    mm = plMipmap(cachename)

                    imgsstream = hsFileStream()
                    imgsstream.open(cachefilepathfull, fmRead)
                    mm.readData(imgsstream)
                    imgsstream.close()
                    rm.AddObject(loc,mm)
        
                    layer = plLayer(texture.name)
                    layer.texture = mm.key
                    SetLayerColorToBlMat(layer,material)
                    rm.AddObject(loc,layer)
                    mat.addLayer(layer.key)
                                         
    if len(mat.layers) == 0: #save the day with an autogenerated layer
        layer = plLayer("%s_auto_layer"%material.name)
        SetLayerColorToBlMat(layer,material)
        rm.AddObject(loc,layer)
        mat.addLayer(layer.key)
        
    vos.materials[material] = mat.key


